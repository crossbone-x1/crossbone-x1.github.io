<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>STM32中断中使用HAL_Delay引起的死机分析及其解决方案</title>
      <link href="/2022/11/09/STM32%E4%B8%AD%E6%96%AD%E4%B8%AD%E4%BD%BF%E7%94%A8HAL-Delay%E5%BC%95%E8%B5%B7%E7%9A%84%E6%AD%BB%E6%9C%BA%E5%88%86%E6%9E%90%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2022/11/09/STM32%E4%B8%AD%E6%96%AD%E4%B8%AD%E4%BD%BF%E7%94%A8HAL-Delay%E5%BC%95%E8%B5%B7%E7%9A%84%E6%AD%BB%E6%9C%BA%E5%88%86%E6%9E%90%E5%8F%8A%E5%85%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在使用按键配置外部中断时，使用HAL_Delay函数进行延时消抖，当进入中断时程序卡死无反应，去除HAL_Delay后恢复正常</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(GPIO_Pin==KEY1_Pin)</span><br><span class="line">  &#123;</span><br><span class="line">    HAL_Delay(<span class="number">20</span>);<span class="comment">/* 延时一小段时间，消除抖动 */</span></span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin)==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">HAL_Delay(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(KEY1_GPIO_Port,KEY1_Pin)==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;KEY=1\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line">    &#125;</span><br><span class="line">    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>查看HAL_Delay相关程序发现，HAL_Delay是通过滴答定时器的中断进行延迟。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief This function provides minimum delay (in milliseconds) based</span></span><br><span class="line"><span class="comment">  *        on variable incremented.</span></span><br><span class="line"><span class="comment">  * @note In the default implementation , SysTick timer is the source of time base.</span></span><br><span class="line"><span class="comment">  *       It is used to generate interrupts at regular time intervals where uwTick</span></span><br><span class="line"><span class="comment">  *       is incremented.</span></span><br><span class="line"><span class="comment">  * @note This function is declared as __weak to be overwritten in case of other</span></span><br><span class="line"><span class="comment">  *       implementations in user file.</span></span><br><span class="line"><span class="comment">  * @param Delay specifies the delay time length, in milliseconds.</span></span><br><span class="line"><span class="comment">  * @retval None</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">__weak <span class="type">void</span> <span class="title function_">HAL_Delay</span><span class="params">(<span class="type">uint32_t</span> Delay)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">uint32_t</span> tickstart = HAL_GetTick();</span><br><span class="line">  <span class="type">uint32_t</span> wait = Delay;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Add a freq to guarantee minimum wait */</span></span><br><span class="line">  <span class="keyword">if</span> (wait &lt; HAL_MAX_DELAY)</span><br><span class="line">  &#123;</span><br><span class="line">    wait += (<span class="type">uint32_t</span>)(uwTickFreq);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ((HAL_GetTick() - tickstart) &lt; wait)</span><br><span class="line">  &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进而查找滴答定时器相关初始化发现，在程序初始化时<strong>默认把滴答定时器的中断优先级设为最低</strong>。</p><p><img src="https://s2.loli.net/2022/11/09/pTKfh4Vb8ZCJnEz.png" alt="默认初始化"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>我们可以在main的初始化后里加上如下指令把滴答定时器优先级调为最高，问题解决。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HAL_NVIC_SetPriority(SysTick_IRQn,<span class="number">0</span>,<span class="number">0U</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> HAL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MATLAB学习日记（1）</title>
      <link href="/2022/11/05/MATLAB%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
      <url>/2022/11/05/MATLAB%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Lingo速通</title>
      <link href="/2022/11/02/Lingo%E9%80%9F%E9%80%9A-0/"/>
      <url>/2022/11/02/Lingo%E9%80%9F%E9%80%9A-0/</url>
      
        <content type="html"><![CDATA[<p><del>此为对数模一窍不通的海豹重新拾起高数的记忆</del></p><p>lingo的代码主要分为<strong>预定义、数据的输入、目标函数、决策变量、约束条件</strong>五个板块。</p><h2 id="常用符号及语句"><a href="#常用符号及语句" class="headerlink" title="常用符号及语句"></a>常用符号及语句</h2><h5 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h5><p>5种二元运算符：</p><p><code>^</code>：乘方</p><p><code>*</code>：乘</p><p><code>/</code>：除</p><p><code>+</code>：加</p><p><code>-</code>：减</p><p>唯一1种一元运算符：</p><p><code>-</code>：取反</p><h6 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h6><p>三种关系运算符：<code>=</code>，<code>&lt;</code>，<code>&gt;</code>。</p><p><strong><em>注意</em>：lingo中<code>&lt;</code>，<code>&gt;</code>分别表示小于等于和大于等于</strong>，如要A严格小于B:那么可以把它变成如下的小于等于表达式：<br>$$<br>A+ε&lt;&#x3D;B<br>$$</p><p>这里<em>ε</em>是一个小的正数，它的值依赖于模型中<em>A</em>小于<em>B</em>多少才算不等</p><h5 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#not# ! 否定该操作数的逻辑值;</span></span><br><span class="line"><span class="comment">#eq# ! 若两个运算数相等，则为true，否则为flase(equal);</span></span><br><span class="line"><span class="comment">#ne# ! 若两个运算符不相等，则为true，否则为flase(not equal);</span></span><br><span class="line"><span class="comment">#gt# ! 若左 &gt; 右，则为true，否则为flase(greater than);</span></span><br><span class="line"><span class="comment">#ge# ! 若左 &gt;= 右，则为true，否则为flase(greater than or equal than);</span></span><br><span class="line"><span class="comment">#lt# ! 若左 &lt; 右，则为true，否则为flase(less than);</span></span><br><span class="line"><span class="comment">#le# ! 若左 &lt;= 右，则为true，否则为flase(less than or equal than);</span></span><br><span class="line"><span class="comment">#and# ! 当两个参数都为true时，则为true，否则为flase(并且);</span></span><br><span class="line"><span class="comment">#or# ! 当两个参数都为flase，则为flase，否则为true(或者);</span></span><br></pre></td></tr></table></figure><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合部分的语法为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sets:</span><br><span class="line">集合名称<span class="number">1</span>/成员列表<span class="number">1</span>/：属性<span class="number">1_1</span>，属性<span class="number">1_2</span>，…，属性1_n1；</span><br><span class="line">集合名称<span class="number">2</span>/成员列表<span class="number">2</span>/：属性<span class="number">2_1</span>，属性<span class="number">2_2</span>，…，属性2_n2；</span><br><span class="line">派生集合名称（集合名称<span class="number">1</span>，集合名称<span class="number">2</span>）：属性<span class="number">3_1</span>，…，属性3_n3；</span><br><span class="line">endsets</span><br></pre></td></tr></table></figure><p><strong>成员罗列的几种方式：</strong></p><ol><li>显示罗列集成员：把所有成员名列出，用逗号” , “或空格分隔。</li><li>隐式罗列集成员：<code>setname/member1..memberN/[: attribute_list]; !用&quot;..&quot;表示省略</code></li></ol><p><strong>派生集的成员列表有两种方式:</strong></p><ol><li><p>显式罗列，罗列出所有成员名</p></li><li><p><strong>设置成员资格过滤器，</strong>思想：许多稀疏集的成员都满足一些条件以和非成员相区分。我们可以把这些逻辑条件看作过滤器，在 LINGO生成派生集的成员时<strong>把使逻辑条件为假的成员从稠密集中过滤掉</strong>。</p><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sets: </span><br><span class="line"> !学生集：性别属性 sex，<span class="number">1</span> 表示男性，<span class="number">0</span> 表示女性；年龄属性 age. ; </span><br><span class="line"> students/John,Jill,Rose,Mike/:sex,age; </span><br><span class="line"> !男学生和女学生的联系集：友好程度属性 friend，[<span class="number">0</span>，<span class="number">1</span>]之间的数。 ; </span><br><span class="line"> linkmf(students,students)|sex(&amp;<span class="number">1</span>) <span class="comment">#eq# 1 #and# sex(&amp;2) #eq# 0: </span></span><br><span class="line">friend; </span><br><span class="line"> !男学生和女学生的友好程度大于 <span class="number">0.5</span> 的集; </span><br><span class="line"> linkmf2(linkmf) | friend(&amp;<span class="number">1</span>,&amp;<span class="number">2</span>) <span class="comment">#gt# 0.5 : x; </span></span><br><span class="line">endsets </span><br></pre></td></tr></table></figure><ul><li>用竖线（<code>|</code>）来标记一个成员资格过滤器的开始</li><li><code>&amp;1</code> 可看作派生集的第 1 个原始父集的索引，它取遍该原始父集的所有成员，派生集的索引个数是最终原始父集的个数</li></ul></li></ol><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>数据部分的语法为:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: data:</span><br><span class="line">属性 <span class="number">1</span>= 数据列表； 数据列表； 数据列表；</span><br><span class="line">属性 <span class="number">2</span>= 数据列表； 数据列表； 数据列表；</span><br><span class="line">enddata nddata</span><br></pre></td></tr></table></figure><ul><li>属性列表（<code>object_list</code>）包含要指定值的属性名、要设置集成员的集名，用逗号或空格隔开。</li><li>数据列表（<code>value_list</code>）包含要分配给对象列中的对象的值，用逗号或空格隔开。<strong>注意属性值的个数必须等于集成员的个数。</strong></li></ul><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>在数据部分也可以指定一些标量变量（scalar variables）。当一个标量变量在数据部分确定时，称之为参数，例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data: </span><br><span class="line"> interest_rate,inflation_rate = <span class="number">.085</span> <span class="number">.03</span>; </span><br><span class="line">enddata</span><br></pre></td></tr></table></figure><h4 id="指定属性为一个值"><a href="#指定属性为一个值" class="headerlink" title="指定属性为一个值"></a>指定属性为一个值</h4><p>为所有成员的属性指定同一个值，也支持多个属性的情况：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sets: </span><br><span class="line"> days /MO,TU,WE,TH,FR,SA,SU/:needs,cost; </span><br><span class="line">endsets </span><br><span class="line">data: </span><br><span class="line"> needs cost = <span class="number">20</span> <span class="number">100</span>; </span><br><span class="line">enddata</span><br></pre></td></tr></table></figure><h2 id="Lingo函数"><a href="#Lingo函数" class="headerlink" title="Lingo函数"></a>Lingo函数</h2><p>函数有很多，在这边仅列出几类常用的，需要用到请自行搜索</p><h4 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@sum(<span class="params">x</span>) ! 对集合x的所有成员求和</span></span><br><span class="line"><span class="meta">@abs(<span class="params">x</span>) ! 返回x的绝对值;</span></span><br><span class="line"><span class="meta">@exp(<span class="params">x</span>) ! 返回常数e的x次方;</span></span><br><span class="line"><span class="meta">@sin(<span class="params">x</span>) ! 返回x的正弦值，x采用弧度制;</span></span><br><span class="line"><span class="meta">@log(<span class="params">x</span>) ! 返回x的自然对数;</span></span><br><span class="line"><span class="meta">@cos(<span class="params">x</span>) ! 返回x的余弦值;</span></span><br><span class="line"><span class="meta">@lgm(<span class="params">x</span>) ! 返回x的log的自然对数;</span></span><br><span class="line"><span class="meta">@tan(<span class="params">x</span>) ! 返回x的正切值;</span></span><br><span class="line"><span class="meta">@sign(<span class="params">x</span>) ! 如果x&lt;<span class="number">0</span>,返回-<span class="number">1</span>，否则返回<span class="number">1</span>;</span></span><br><span class="line"><span class="meta">@smax(<span class="params">x1, x2, x3, x4, ...xn</span>) ! 返回xn中的最大值;</span></span><br><span class="line"><span class="meta">@smin(<span class="params">x1, x2, x3, x4, ...xn</span>) ! 返回xn中的最小值;</span></span><br><span class="line"><span class="meta">@floor(<span class="params">x</span>) ! 向接近于<span class="number">0</span>的方向取整;</span></span><br></pre></td></tr></table></figure><h4 id="变量定界函数"><a href="#变量定界函数" class="headerlink" title="变量定界函数"></a>变量定界函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@bin(<span class="params">x</span>) 限制x为<span class="number">0</span>或<span class="number">1</span></span></span><br><span class="line"><span class="meta">@bnd(<span class="params">L,x,U</span>) 限制LxU</span></span><br><span class="line"><span class="meta">@free(<span class="params">x</span>) 取消对变量x的默认下界为<span class="number">0</span>的限制，即x可以取任意实数</span></span><br><span class="line"><span class="meta">@gin(<span class="params">x</span>) 限制x为整数</span></span><br></pre></td></tr></table></figure><h4 id="集合循环函数"><a href="#集合循环函数" class="headerlink" title="集合循环函数"></a>集合循环函数</h4><p>集合循环函数是指对集合上的元素（下标）进行循环操作的函数 一般用法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@function(<span class="params">set_operator (<span class="params">set_name|condition:expression</span>)</span>)</span></span><br></pre></td></tr></table></figure><p>其中set_operator部分是集合函数名（见下），set_name是数据集 合名，expression部分是表达式，|condition部分是条件，用逻辑表达式描述（无条件时可省略）.</p><p>常见集合函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FOR (<span class="params">set_name：  constraint_expressions</span>) </span></span><br><span class="line">! 对集合(set_name)的每个元素独立地生成约束，约束由约束表达式(constraint_expressions)描述;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SUM(<span class="params">set_name：expression</span>) ! 返回集合上的表达式(<span class="params">expression</span>)的和;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@MAX(<span class="params">set_name：expression</span>) ！ 返回集合上的表达式(<span class="params">expression</span>)的最大值;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@MIN(<span class="params">set_name：expression</span>) ! 返回集合上的表达式(<span class="params">expression</span>)的最小值;</span></span><br></pre></td></tr></table></figure><h4 id="输入和输出函数"><a href="#输入和输出函数" class="headerlink" title="输入和输出函数"></a>输入和输出函数</h4><p>输入和输出函数可以把模型和外部数据比如文本文件、数据库和电子表格等连接起来。</p><ol><li><code>@file</code>：用来从外部文件中输入数据，可以放在模型中任何地方。该函数的语法格式为<code>@file(&#39;filename&#39;)</code>。这里 <code>filename</code> 是文件名，可以采用相对路径和绝对路径两种表示方式。</li></ol><p>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">sets: </span><br><span class="line"> warehouses/ @file(<span class="string">&#x27;1_2.txt&#x27;</span>) /: capacity;</span><br><span class="line"> vendors/ @file(<span class="string">&#x27;1_2.txt&#x27;</span>) /: demand; </span><br><span class="line"> links(warehouses,vendors): cost, volume; </span><br><span class="line">endsets </span><br><span class="line">!目标函数; </span><br><span class="line"> <span class="built_in">min</span>=@<span class="built_in">sum</span>(links: cost*volume); </span><br><span class="line">!需求约束; </span><br><span class="line"><span class="meta"> @for(<span class="params">vendors(<span class="params">J</span>):@<span class="built_in">sum</span>(<span class="params">warehouses(<span class="params">I</span>):volume(<span class="params">I,J</span>)</span>)=demand(<span class="params">J</span>)</span>); </span></span><br><span class="line">!产量约束; </span><br><span class="line"><span class="meta"> @for(<span class="params">warehouses(<span class="params">I</span>):@<span class="built_in">sum</span>(<span class="params">vendors(<span class="params">J</span>):volume(<span class="params">I,J</span>)</span>)&lt;=capacity(<span class="params">I</span>)</span>); </span></span><br><span class="line">!这里是数据; </span><br><span class="line">data: </span><br><span class="line"> capacity = @file(<span class="string">&#x27;1_2.txt&#x27;</span>) ; </span><br><span class="line"> demand = @file(<span class="string">&#x27;1_2.txt&#x27;</span>) ; </span><br><span class="line"> cost = @file(<span class="string">&#x27;1_2.txt&#x27;</span>) ; </span><br><span class="line">enddata </span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>模型的所有数据来自于 1_2.txt 文件。其内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">!warehouses 成员; </span><br><span class="line">WH1 WH2 WH3 WH4 WH5 WH6 ~ </span><br><span class="line"></span><br><span class="line">!vendors 成员; </span><br><span class="line">V1 V2 V3 V4 V5 V6 V7 V8 ~ </span><br><span class="line"></span><br><span class="line">!产量; </span><br><span class="line"><span class="number">60</span> <span class="number">55</span> <span class="number">51</span> <span class="number">43</span> <span class="number">41</span> <span class="number">52</span> ~ </span><br><span class="line"></span><br><span class="line">!销量; </span><br><span class="line"><span class="number">35</span> <span class="number">37</span> <span class="number">22</span> <span class="number">32</span> <span class="number">41</span> <span class="number">32</span> <span class="number">43</span> <span class="number">38</span> ~ </span><br><span class="line"></span><br><span class="line">!单位运输费用矩阵; </span><br><span class="line"><span class="number">6</span> <span class="number">2</span> <span class="number">6</span> <span class="number">7</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">9</span> </span><br><span class="line"><span class="number">4</span> <span class="number">9</span> <span class="number">5</span> <span class="number">3</span> <span class="number">8</span> <span class="number">5</span> <span class="number">8</span> <span class="number">2</span> </span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">1</span> <span class="number">9</span> <span class="number">7</span> <span class="number">4</span> <span class="number">3</span> <span class="number">3</span> </span><br><span class="line"><span class="number">7</span> <span class="number">6</span> <span class="number">7</span> <span class="number">3</span> <span class="number">9</span> <span class="number">2</span> <span class="number">7</span> <span class="number">1</span> </span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">9</span> <span class="number">5</span> <span class="number">7</span> <span class="number">2</span> <span class="number">6</span> <span class="number">5</span> </span><br><span class="line"><span class="number">5</span> <span class="number">5</span> <span class="number">2</span> <span class="number">2</span> <span class="number">8</span> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p>把记录结束标记（~）之间的数据文件部分称为记录。如果数据文件中没有记录结束标记，那么整个文件被看作单个记录。注意到除了记录结束标记外，模型的文本和数据同它们直接放在模型里是一样的。</p><p><strong>在数据文件中的记录结束标记连同模型中</strong><code>@file</code><strong>函数调用工作过程</strong>：当在模型中第一次调用<code>@file</code> 函数时，LINGO 打开数据文件，然后读取第一个记录；第二次调用<code>@file</code>函数时，LINGO 读取第二个记录等等。文件的最后一条记录可以没有记录结束标记。</p><ol start="2"><li><p><code>@text</code> ：该函数被用在数据部分用来把解输出至文本文件中。它可以输出集成员和集属性值。其语法为：<code>@text([’filename’])</code></p></li><li><p><code>@OLE(filename)</code>：是从 EXCEL 中引入或输出数据的接口函数，它是基于传输的 OLE 技术。OLE传输直接在内存中传输数据，并不借助于中间文件。</p><ul><li><code>filename</code>为文件名，可以是相对路径，也可以是绝对路径。</li><li><code>@OLE</code> 可以同时读集成员和集属性，集成员最好用文本格式，集属性最好用数值格式。原始集每个集成员需要一个单元(cell)，而对于 n 元的派生集每个集成员需要 n个单元，这里第一行的 n 个单元对应派生集的第一个集成员，第二行的 n 个单元对应派生集的第二个集成员，依此类推。</li><li><code>@OLE</code> 只能读一维或二维的 Ranges（在单个的 EXCEL 工作表(sheet)中），但不能读间断的或三维的 Ranges。Ranges 是自左而右、自上而下来读。</li></ul></li><li><p>‘@status()’：返回Lingo求解模型结束后的状态：</p><table><thead><tr><th>0</th><th>Global Optimum（全局最优）</th></tr></thead><tbody><tr><td>1</td><td>Infeasible（不可行）</td></tr><tr><td>2</td><td>Unbounded（无界）</td></tr><tr><td>3</td><td>Undetermined（不确定）</td></tr><tr><td>4</td><td>Feasible（可行）</td></tr><tr><td>5</td><td>Infeasible or Unbounded（通常需要关闭“预处理”选项后重新求解模型，以确定模型究竟是不可行还是无界）</td></tr><tr><td>6</td><td>Local Optimum（局部最优）</td></tr><tr><td>7</td><td>Locally Infeasible（局部不可行，尽管可行解可能存在，但是 LINGO 并没有找到一个）</td></tr><tr><td>8</td><td>Cutoff（目标函数的截断值被达到）</td></tr><tr><td>9</td><td>Numeric Error（求解器因在某约束中遇到无定义的算术运算而停止）</td></tr></tbody></table></li></ol><h4 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@if(<span class="params">logical_condition,true_result,false_result</span>) ！ 评价一个逻辑表达式 logical_condition，如果为真，返回 true_ esult，否则返回false_result。</span></span><br></pre></td></tr></table></figure><h2 id="Lingo注意事项"><a href="#Lingo注意事项" class="headerlink" title="Lingo注意事项"></a>Lingo注意事项</h2><p>1.Lingo中模型以“MODEL：”开始，以“END”结束， 对于简单的模型，这两个语句都可以省略；</p><p>2.Lingo中每行后面均增加了一个分号“;”；</p><p>3.所有符号都需在英文状态下输入；</p><p>4.min&#x3D;函数、max&#x3D;函数，表示求函数的最小、最大值；</p><p>5.Lingo中变量不区分大小写，变量名可以超过8个，但 不能超过32个，需以字母开头；</p><p>6.用Lingo解优化模型时已假定所有变量非负，如果想解除这个限制可以用函数@free(<em>x</em>)，这样<em>x</em>可以取到任意实数；</p><p>7.变量可以放在约束条件右端，同时数字也可以放在约束条件左边；</p><p>8.Lingo模型语句由一系列语句组成，每一个语句都必须 以“;”结尾；</p><p>9.Lingo中注释以“!”开始的是，以“;” 结束，可以跨多行。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数学建模 </tag>
            
            <tag> LINGO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STM32cubemx中因no debug导致的工程不能重复烧入的解决办法</title>
      <link href="/2022/06/03/Debug%E5%AF%BC%E8%87%B4%E7%9A%84%E5%B7%A5%E7%A8%8B%E4%B8%8D%E8%83%BD%E9%87%8D%E5%A4%8D%E7%83%A7%E5%85%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>/2022/06/03/Debug%E5%AF%BC%E8%87%B4%E7%9A%84%E5%B7%A5%E7%A8%8B%E4%B8%8D%E8%83%BD%E9%87%8D%E5%A4%8D%E7%83%A7%E5%85%A5%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>​暴雨天，突感一阵寒意，喝了口快乐水，大脑愈发精神，于是又敲起键盘，打下些令正人君子深恶痛绝的文字。</p><hr><h3 id="在cubeMX中No-Debug导致的工程不能重复烧入的解决办法"><a href="#在cubeMX中No-Debug导致的工程不能重复烧入的解决办法" class="headerlink" title="在cubeMX中No Debug导致的工程不能重复烧入的解决办法"></a><strong>在cubeMX中No Debug导致的工程不能重复烧入的解决办法</strong></h3><p>​试烧了一个点亮led的程序后，再次烧入就行不通了，无论怎么检查，通电，设置都没问题，而仿真器无法连接，无法下载。</p><p>显示：<code>Error: Flash Download failed  -  Target DLL has been cancelled</code></p><p>​板子似乎和废铁一样了（悲</p><p>查找资料后知道了问题所在</p><ul><li><h4 id="stm32一共有三种启动模式，对应的储存介质是芯片内置的，他们是："><a href="#stm32一共有三种启动模式，对应的储存介质是芯片内置的，他们是：" class="headerlink" title="stm32一共有三种启动模式，对应的储存介质是芯片内置的，他们是："></a>stm32一共有三种启动模式，对应的储存介质是芯片内置的，他们是：</h4><p>1.用户闪存 &#x3D; 芯片内置的Flash。</p><p>2.SRAM &#x3D; 芯片内置的RAM区，就是内存啦。</p><p>3.系统存储器 &#x3D; 芯片内部一块特定的区域，芯片出厂时在这个区域预置了一段Bootloader，就是通常说的ISP程序。</p><p>这个区域的内容在芯片出厂后没有人能够修改或擦除，即它是一个ROM区。</p><p>在每个STM32的芯片上都有两个管脚BOOT0和BOOT1，这两个管脚在芯片复位时的电平状态决定了芯片复位后从哪个区域开始执行程序，见下表：</p><p>BOOT1&#x3D;x   BOOT0&#x3D;0   从用户闪存启动，这是正常的工作模式。</p><p>BOOT1&#x3D;0   BOOT0&#x3D;1   从系统存储器启动，这种模式启动的程序功能由厂家设置。</p><p>BOOT1&#x3D;1   BOOT0&#x3D;1   从内置SRAM启动，这种模式可以用于调试。</p><p>一般BOOT0和BOOT1跳线都跳到0(地)</p></li><li><p><u>下载出错的原因就在于使用库函数或者Cube MX对端口初始化时如不特别指定会默认将SWCLK和SWDIO对应的端口释放为普通IO口，这样再次下载时就无法使用这两个端口的SW-DP功能，也就会产生各种错误</u></p></li></ul><h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><p>（1）把启动模式改成RAM启动，就是<code>BOOT1</code>和<code>BOOT0</code>都接高，再在keil中下载，这时是成功的。</p><p>（2）把启动模式改回去，再下载（这时的代码应该是在MX中Debug打开的），就可以了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> STM32 </tag>
            
            <tag> HAL </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
